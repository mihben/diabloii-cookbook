# This is a basic workflow to help you get started with Actions

name: PreRelease

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the develop branch
on:
  push:
    tags:
        - 'prerelease/*'

env:
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs: 
  # This workflow contains a single job called "build"

  build:
    name: Build and Analyze
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:                    
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
          
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis  
          
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1.7.2

      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: pwsh
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"mihben_diabloii-cookbook" /n:"DiabloII-Cookbook" /o:"mihben" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" -d:sonar.cs.vstest.reportsPaths="**/TestResults/*.trx"          
          dotnet build $(Resolve-Path -Path "src\*.sln") --configuration Release
          dotnet test $(Resolve-Path -Path "src\\*.sln") --results-directory TestResults --logger "trx;LogFileName=results.trx" --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"       
          
  publish-backend:  
    name: Publish Backend
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Calculate Version
        id: calculate_version
        uses: johngeorgewright/parse-version-action@v1.0.2
        with:
          ref: ${{ github.ref }}
          trim-start: prerelease/
    
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: mihben@gmail.com
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: true
          file: ./src/DiabloII-Cookbook.Web/Dockerfile
          context: .
          tags: |            
            ghcr.io/${{ github.repository }}/diabloii-cookbook:${{ steps.calculate_version.outputs.version }}

  publish-api:  
    name: Publish API
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Calculate Version
        id: calculate_version
        uses: johngeorgewright/parse-version-action@v1.0.2
        with:
          ref: ${{ github.ref }}
          trim-start: prerelease/
    
      - name: Publish
        uses: rohith/publish-nuget@v2
        with:
            PROJECT_FILE_PATH: ./src/DiabloII-Cookbook/DiabloII-Cookbook.Api.csproj
            VERSION_STATIC: ${{ steps.calculate_version.outputs.version }}
            NUGET_KEY: ${{secrets.NUGET_API_KEY}}
            INCLUDE_SYMBOLS: true
            
  publish-client:
    name: Publish Client
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout
        uses: actions/checkout@v2        
        
      - name: Calculate Version
        id: calculate_version
        uses: johngeorgewright/parse-version-action@v1.0.2
        with:
          ref: ${{ github.ref }}
          trim-start: prerelease/
          
      - name: Checkout
        uses: actions/checkout@v2
    
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: mihben@gmail.com
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: true
          file: ./src/DiabloII-Cookbook.Client/Dockerfile
          context: .
          tags: | 
            ghcr.io/${{ github.repository }}/diabloii-cookbook-frontend:${{ steps.calculate_version.outputs.version }}
