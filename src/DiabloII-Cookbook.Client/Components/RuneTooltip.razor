@using DiabloII_Cookbook.Api.DataTransferObjects
@using DiabloII_Cookbook.Client.Extensions
@using System.Drawing

<div class="tooltip-wrapper">
    <div id="#tooltip" class="tooltip panel" style="visibility: @IsShownTooltip; left: @TooltipPositionX; top: @TooltipPositionY">
        <p class="name">@Rune.Name</p>        
        <p class="description">
            <span class="label">In Weapon:</span>@Rune.InWeapon
        </p>     
        <p class="description">
            <span class="label">In Helmet:</span>@Rune.InHelm
        </p>     
        <p class="description">
            <span class="label">In Armor:</span>@Rune.InArmor
        </p>     
        <p class="description">
            <span class="label">In Shield:</span>@Rune.InShield
        </p>
        <p class="@Rune.IsApplicable(Level ?? 99)">
            <span style="margin-right: 4px">Required level:</span>@Rune.Level
        </p>
    </div>
    <div @onmouseover="ShowTooltip" @onmouseout="HideTooltip"  @onmousemove="ShowTooltip">
        @ChildContent        
    </div>
</div>

@code {
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public Rune Rune { get; set; }
    [Parameter] public int? Level { get; set; }

    private const string VISIBLE = "visible";
    private const string HIDDEN = "hidden";

    public string IsShownTooltip { get; set; } = "hidden";
    public string TooltipPositionX { get; set; }
    public string TooltipPositionY { get; set; }

    private void ShowTooltip(MouseEventArgs args)
    {
        TooltipPositionX = $"{args.OffsetX + 10}px";
        TooltipPositionY = $"{args.OffsetY + 10}px";        
        if (!IsShownTooltip.Equals(VISIBLE)) IsShownTooltip = VISIBLE;
    }

    private void HideTooltip(MouseEventArgs args)
    {
        IsShownTooltip = HIDDEN;
    }
}
