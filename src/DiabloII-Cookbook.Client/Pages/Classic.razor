@page "/classic"

@using DiabloII_Cookbook.Api.DataTransferObjects;
@using DiabloII_Cookbook.Api.Queries
@using DiabloII_Cookbook.Client.Extensions;
@using DiabloII_Cookbook.Client.Components;
@using System.Threading
@using DiabloII_Cookbook.Client.Models;
@using Blazored.Modal
@using Blazored.Modal.Services

@inject IModalService Modal;
@inject HttpClient client;

<div class="container">
    <div class="panel left">
        <div class="character-information">
            <div class="character-selector">
                <img class="arrow" src="/assets/classic/elements/left.png" @onclick="PreviousAsync" />
                <img class="character-image" src="@Character?.GetImage()" />
                <img class="arrow" src="/assets/classic/elements/right.png" @onclick="NextAsync" />
            </div>

            <div class="character-detail">
                <label>Name:</label>
                <span>@Character?.Name</span>

                <label>Level:</label>
                <span>@Character?.Level</span>

                <label>Ladder:</label>
                <span>@Character?.IsLadder.ToReadable()</span>

                <label>Expansion:</label>
                <span>@Character?.IsExpansion.ToReadable()</span>
            </div>
        </div>

        <div class="selector">
            @foreach (var rune in Runes)
            {
                <input class="rune-select" type="checkbox" />
                <RuneComponent Rune="@rune" Level="@Character.Level" />
            }
        </div>

        <div class="button-row">
            <button class="left-row" @onclick="CreateAsync">Create</button>
            <button class="right-row">Delete</button>
        </div>

    </div>

    <div class="right data">
        <div class="panel filter">
            <div class="filter-container">
                <div class="armor-filters">
                    @foreach (var armor in ArmorFilters)
                    {
                        <div class="selector">
                            <input type="checkbox" @bind-value="@armor.Selected" />
                            <span>@armor.ItemType.Name</span>
                        </div>
                    }
                </div>>
                <div class="weapon-filters">
                    @foreach (var weapon in WeaponFilters)
                    {
                        <div class="selector">
                            <input type="checkbox" @bind-value="@weapon.Selected" />
                            <span>@weapon.ItemType.Name</span>
                        </div>
                    }
                </div>
            </div>

            <div class="button-row">
                <div class="left-row">
                    <button @onclick="SelectArmors">Armors</button>
                    <button @onclick="SelectWeapons">Weapons</button>
                </div>

                <div class="right-row">
                    <button @onclick="FilterRuneWordsAsync">Filter</button>
                    <button @onclick="GetAllRuneWordsAsync">All</button>
                </div>
            </div>
        </div>

        <div class="rune-words-container">
            @foreach (var runeWord in RuneWords)
            {
                <RuneWordComponent RuneWord="@runeWord" Level="@Character.Level" />
            }
        </div>
    </div>
</div>

@code {
    public List<Guid> Characters { get; private set; }
    public Character Character { get; private set; }

    public IEnumerable<Rune> Runes { get; private set; } = Enumerable.Empty<Rune>();

    public IEnumerable<Filter> ArmorFilters { get; private set; } = Enumerable.Empty<Filter>();
    public IEnumerable<Filter> WeaponFilters { get; private set; } = Enumerable.Empty<Filter>();

    public IEnumerable<RuneWord> RuneWords { get; private set; } = Enumerable.Empty<RuneWord>();

    private int _index = 0;
    private List<Character> _characterList;

    protected override async Task OnInitializedAsync()
    {
        Characters = new List<Guid>
        {
            Guid.NewGuid(),
            Guid.NewGuid(),
            Guid.NewGuid(),
            Guid.NewGuid(),
            Guid.NewGuid(),
            Guid.NewGuid(),
            Guid.NewGuid()
        };

        var list = new List<Character>();
        list.Add(new Character(Characters.ElementAt(0), "Assassin", "Amazon", 25, true, false, Enumerable.Empty<Rune>()));
        list.Add(new Character(Characters.ElementAt(1), "Assassin", "Assassin", 10, false, false, Enumerable.Empty<Rune>()));
        list.Add(new Character(Characters.ElementAt(2), "Barbarian", "Barbarian", 10, false, false, Enumerable.Empty<Rune>()));
        list.Add(new Character(Characters.ElementAt(3), "Druid", "Druid", 10, false, false, Enumerable.Empty<Rune>()));
        list.Add(new Character(Characters.ElementAt(4), "Necromancer", "Necromancer", 10, false, false, Enumerable.Empty<Rune>()));
        list.Add(new Character(Characters.ElementAt(5), "Paladin", "Paladin", 10, false, false, Enumerable.Empty<Rune>()));
        list.Add(new Character(Characters.ElementAt(6), "Sorceress", "Sorceress", 10, false, false, Enumerable.Empty<Rune>()));

        _characterList = list;

        Runes = await GetRunesAsync(default);

        var itemTypes = await GetItemTypesAsync(default);
        ArmorFilters = itemTypes.AsFilter("Armor");
        WeaponFilters = itemTypes.AsFilter("Weapon");

        await RefreshCharacterAsync(_index);
    }

    public async Task PreviousAsync()
    {
        if (_index > 0) await RefreshCharacterAsync(--_index);
    }

    public async Task NextAsync()
    {
        if (_index < Characters.Count() - 1) await RefreshCharacterAsync(++_index);
    }

    private Task RefreshCharacterAsync(int index)
    {
        Character = _characterList.ElementAt(index);

        return Task.CompletedTask;
    }

    private async Task<IEnumerable<Rune>> GetRunesAsync(CancellationToken cancellationToken)
    {
        var query = new GetRunesQuery();
        client.DefaultRequestHeaders.Clear();
        client.DefaultRequestHeaders.Add("message-type", query.MessageType);
        var result = await client.PostAsJsonAsync("api", query, cancellationToken);
        return await result.Content.ReadFromJsonAsync<IEnumerable<Rune>>(cancellationToken: cancellationToken);
    }

    public async Task GetAllRuneWordsAsync()
    {
        var query = new GetAllRuneWordsQuery();
        client.DefaultRequestHeaders.Clear();
        client.DefaultRequestHeaders.Add("message-type", query.MessageType);
        var result = await client.PostAsJsonAsync("api", query, default);
        RuneWords = await result.Content.ReadFromJsonAsync<IEnumerable<RuneWord>>(cancellationToken: default);
    }

    public async Task<IEnumerable<ItemType>> GetItemTypesAsync(CancellationToken cancellationToken)
    {
        var query = new GetItemTypesQuery();
        client.DefaultRequestHeaders.Clear();
        client.DefaultRequestHeaders.Add("message-type", query.MessageType);
        var result = await client.PostAsJsonAsync("api", query, cancellationToken);
        return await result.Content.ReadFromJsonAsync<IEnumerable<ItemType>>(cancellationToken: cancellationToken);
    }

    public void SelectArmors()
    {
        var target = ArmorFilters.All(at => !at.Selected);

        foreach (var armor in ArmorFilters)
        {
            armor.Selected = target;
        }

        Console.WriteLine("Select armors");
    }

    public void SelectWeapons()
    {
        var target = WeaponFilters.All(wt => !wt.Selected);

        foreach (var weapon in WeaponFilters)
        {
            weapon.Selected = target;
        }
    }

    public async Task FilterRuneWordsAsync()
    {
        Console.WriteLine(WeaponFilters.Count(wf => wf.Selected) + ArmorFilters.Count(af => af.Selected));

        foreach (var filter in WeaponFilters.Where(af => af.Selected))
        {
            Console.WriteLine(filter.ItemType.Name);
        }
    }

    public async Task CreateAsync()
    {
        var modalReference = Modal.Show<CreateCharacter>();

        var result = await modalReference.Result;
        if (!result.Cancelled)
        {
            var character = (Character)result.Data;
            Characters.Add(character.Id);

            _characterList.Add(character);

            _index = _characterList.IndexOf(_characterList.First(cl => cl.Id.Equals(character.Id)));
            await RefreshCharacterAsync(_index);
        }
    }
}
